#linux_2
___

##1、linux目录结构

###磁盘分区
```python
1.主分区最多有四个，扩展分区也是一个主分区，扩展分区可以建立逻辑分区。
2.初学者建议：/boot 分区，它是引导分区，300-500MB,我们的磁盘比较大就分1024MB。

swap分区，没有挂载点，大小为/boot两倍。

如何让服务器响应更快？如何避免应用出现内存不足的错误？最简单的方法就是增加交换空间。Swap是存储盘上的一块自留地，操作系统可以在这里暂存一些内存里放不下的东西。

通过添加swap来解决。

这从某种程度上相当于增加了服务器的可用内存。虽然从swap读写比内存慢，但总比没有好，就算是作为内存不够时的安全保障。

如果没有swap，则服务器一旦内存不足，就会开始终止应用以释放内存，甚至会崩溃，这会让你丢失一些还没来得及保存的数据，或者造成宕机。有些应用明确要求系统配置swap以确保数据访问的可靠性。

但是它也有一个坑：我们在使用云服务器的时候，不推荐使用swap文件。为什么了？

因为现在大部分的云服务器都是SSD，在SSD上使用swap可能会造成问题，尤其是硬件老化之后。swap通常在传统机械硬盘上表现更好。
```

###目录结构

```python
->  /：根目录，文件的最顶端，/etc、/bin、/dev、/lib、/sbin 应该和根目录放在同一个分区，/usr/local 可以单独放置一个分区

-> /bin ：存放系统所需要的重要命令，ls，cp，mkdir 等，usr/bin 也存放了一些系统命令，这些命令对应的文件都是可执行的，普通用户可以使用大部分的命令,其实就是一些二进制文件。

-> /boot：存放Linux启动时内核及引导系统程序所需要的核心文件，内核文件和grub 系统引导管理器都位于此目录

-> /dev：存放Linux 系统下的设备文件，如光驱，磁盘等。访问该目录下的某个文件相当于访问某个硬件设备，常用的是挂在光驱

-> /etc：一般存放系统的配置文件，作为一些软件启动时默认配置文件读取的目录，如

/etc/fstab存放系统分区信息

->  /home：系统默认的用户主目录

/lib：主要存放动态链接库

/lost+found：存放一些当系统以外崩溃或机器意外关机时产生的文件碎片

->  /mnt：用于存放挂载储存设备的挂载目录

/proc：存放操作系统运行时的运行信息，如进程信息、内核信息、网络信息，如/etc/cpuinfo存放CPU的相关信息。process

-> /root：Linux超级权限用户的root目录

/sbin：存放一些系统管理的命令，一般只能由超级权限用户root执行。

/tmp：临时文件目录，任何人都可以访问。系统软件或用户运行程序如MySQL时产生的临时文件存放到这里，此目录数据需要定期清除。中号数据不可放置在此目录下，此目录空间不宜过小

-> /usr：应用程序存放目录，如命令、帮助文档等。安装Linux软件包时默认安装到/usr/local目录下

/var：这个目录的内容经常变动的，/var/log用于存放系统日志，/var/lib存放系统库文件等。

/sys：目录与/proc类似，是一个虚拟的文件系统，主要记录与系统核心相关的信息，入系统当前已经载入的模块信息等。这个目录实际不占磁盘容量。

/media	媒体设备，可以挂载一些设备到这里

/opt	可选的附加程序，有时候一些软件安装的地方
```


##2.list命令

###ls

```python
ls : 显示当前目录下所有的文件和文件夹
ls  目录路径  ： 显示指定目录下的文件和文件夹
	常用参数
	-a : 显示目录下所有文件
			linux里面，以点开头的文件都是隐藏文件
	-l : 以列表的形式显示所有文件
	-s ： 以kB显示文件大小
	-R ： 递归的显示目录下面所有的文件
    
ls -ano
```
###ll

```python
ll之后显示的文件详细信息的内容
		第一列：文件的类型
			d：目录
			-：文件
			l：链接
			c：字符设备
			b：块设备
		第二列到第十列：文件的权限
		第十一列：就是一个点，如果开启了selinux，前面就有点，如果没有开启的时候，创建的目录就没有点
		第十二列：
			目录：子目录的个数
			文件：硬链接的个数
		第十三列：该文件属于哪个用户
		第十四列：该文件属于哪个组
		第十五列：文件大小
		第十六列-第十八列：文件的创建时间
		第十九列：文件的名字
```

##3.vi/vim(编辑器)

```python

vi：原生自带的
vim：vi的增强版，需要安装: yum install vim -y

简单使用：
		1、vi  文件名   如果文件不存在，则创建之，如果存在，则打开之
		2、一进来这个界面称之为vi的指令模式
		3、输入小写字母  i（insert）   进入到编辑模式（插入模式）
		4、编辑你的文件
		5、先按一下  esc  ，退出编辑模式到指令模式
		6、输入 :   该冒号为英文冒号，进入到底行模式
		7、输入 wq  保存并退出
```
```python
vim的用法(vi和vim一样)
		指令模式：vi一进来就是该模式
		编辑模式：按i切换到该模式
		底行模式：输入英文冒号进入底行模式
		
		命令模式-->编辑模式
		>i：直接在当前光标处开始编辑
		I：从光标所在行第一个非空字符开始编辑
		>a：在光标后一个开始编辑
		A：在光标所在行的末尾开始编辑
		>o：在光标所在行下一行，另起一行开始编辑
		O：在光标所在行上一行，另起一行开始编辑
		s：删除光标所在字符开始编辑
		S：删除光标所在行开始编辑
		
		命令模式下的快捷键
		gg：光标快速定位到第一行行首
		G：光标快速的定位到末行行首
		ngg：光标快速定位到第n行行首
		>^ : 光标快速定位到该行行首
		>$ : 光标快速定位到该行行尾
		>dd：删除光标所在行
		ndd：删除光标下n行
		>yy：复制光标所在行
		>p：粘贴到光标的下面
		nyy：复制光标下n行
		np：粘贴n次
		>u：撤销到上一次操作   undo
		：删除文件所有内容
		ctrl+f ： 下一页   forward
		ctrl+b： 上一页    back
		ctrl+d： 向下翻半页  down
		ctrl+u： 向上翻半页  up
		zt：将光标所在行放到屏幕的最顶部  top
		zb：将光标所在行放到屏幕的最底部  bottom
		zz：将光标所在行放到屏幕正中间    zhongjian
		
		底行模式下的指令
		:set nu  显示行号
		:set nonu  取消显示行号:
		查找字符串
			:/香水   先按enter，然后按n找下一个，按N找上一个   从上往下找
			:?香水   先按enter，然后按n找下一个，按N找上一个   从下往上找 
		字符串替换
			:s/闺蜜/小蜜    将光标所在行的第一个闺蜜替换为小蜜
			:s/闺蜜/小蜜/g  将光标所在行的所有闺蜜替换为小蜜
			:n,s/闺蜜/小蜜  将指定行的第一个闺蜜替换为小蜜
			:n,s/闺蜜/小蜜/g  将指定行的所有闺蜜替换为小蜜
			:%s/闺蜜/小蜜    将每一行的第一个闺蜜替换为小蜜
			:%s/闺蜜/小蜜/g  将每一行的所有闺蜜替换为小蜜
		:wq    保存并退出
		:q     不保存退出
		:q!    不保存，强制退出
		:x     保存并退出
        :wq!   强制保存退出
		shift+zz  保存并退出
		
		简便操作
		vim demo.txt +15   打开文件并且指定到第15行
		vim demo.txt +     打开文件并且指定到尾行
		
		当非法关闭正在编辑的文件的时候，再次打开文件会有提示信息，这个时候不要慌，不要急，敲enter就可以进来，如果想要保存上次写的东西   vi -r 1.txt
		将产生的交换文件删除掉   rm .1.txt.swp
		
		#vim的配置文件vim /etc/vimrc	
		1.添加永久显示行号
			vim /etc/vimrc +
			
		2.在最后一行添加：set number 
			
		3.然后:wq 
```

###4.文件相关指令

####创建
```python
文件
	vim 文件路径   不存在就会创建
	touch 文件路径
目录
	mkdir  路径（绝对或者相对都行）
	-p     递归的创建目录，中间目录也创建
    
    yum -y intsall tree
    #tree . 可以查看树状目录结构图
```

####删除

```python
文件
	rm 文件路径
	rm -f 文件路径    强制删除不提示
	【友情提醒】rm之后，永远无法找到，使用rm且行且珍惜
	rm *.txt        删除所有的txt文件
	rm *            删除所有文件
目录
	rmdir 目录路径    只能删除空目录
	rm -rf 目录路径   递归的删除非空目录
    -r  代表递归
```

####移动

```python

文件和目录是一样
mv 源路径（绝对、相对） 目的路径（绝对、相对）
mv test/demo.txt   test1/demo1.txt
#把test/demo.txt移动到test1/demo1.txt(改名为demo1.txt)
移动的时候可以修改名字   mv 4.mp3 1.txt
```

####拷贝

```python

文件
	cp   源地址（绝对、相对）  目标地址（绝对、相对）
	拷贝的时候可以修改名字
目录
	cp  -r  源地址（绝对、相对）  目标地址（绝对、相对）
```

####查看

```python

cat 文件名
	-n 查看的时候显示行号
tac 文件名    倒着看文件
head 文件名   默认显示前10行
	-n   指定显示几行
tail 文件名   默认显示后10行
	-n   指定显示几行

文件比较大的时候，使用cat查看非常不方便，这个时候我们使用more
more 文件名
	敲enter键往下走一行，敲空格键，往下走一页
	回不去，只能往下看
	如果不想看了，q退出
less 文件名
	敲enter键往下走一行，敲空格键，往下走一页
	可以向上翻页，键盘上的pageup，pagedown
	输入 /丈母娘   可以查找内容
wc 文件名
	行数   字节数   文件名
往文件中写内容
	echo 内容>1.txt    先清空文件的内容，然后再写入
	echo 内容>>1.txt   追加内容
```

####5、文件系统
文件系统就是文件管理系统的简称，它规定了数据的存储方式和读取方式，不同的文件系统存储和读取方式不同，不同的文件系统存的大小也都不一样

```python
常见的文件系统
windows
	fat
		fat16
		fat32   目前很多u盘就是这个格式，存储的单个文件最大为4G
	ntfs
		windows系统默认的文件系统格式，到mac电脑上只读，在mac上装一个插件，插件收费的
	exfat
		fat64，mac下和windows下都能读写
        如果不弹出,每次都要修复,不修复没什么大事,有可能MAC独步出来了
linux
	ext2
	ext3
	ext4   主流这个
    xfs    默认
mac
	hfs
	hfs+
	apfs
```
####6、用户和组

用户和组之间的关系
一个用户能不能属于多个组，可以
一个组能不能有多个用户，必须可以

[注]一个用户必须要有与之对应的一个主组

用户:

创建

```python
useradd 用户名
cat /etc/passwd
在创建用户的时候，如果没有指定这个用户的主组，那么系统会自动的为这个用户创建一个和用户名一样的组作为该用户的主组（一般都不指定）
-g   指定主组，组名或者组id
-u   指定用户id    一般不指定
-d   指定家目录    一般不指定
给用户添加密码
	passwd 用户名
	在root下面，你可以修改其它用户的密码
	但是在普通用户下面，只能修改自己的密码，不能别的用户的密码
```

修改

```python
usermod
-g(修改主组)  -u(修改用户id)  -l(修改用户名)  -d(修改家目录)

usermod -l 新名字 原来的用户名

修改了用户名->就要修改家目录->修改/home下面的原来用户文件夹
```

删除

```python
userdel  用户名   仅仅删除用户信息，不删除家目录h
-r                同时删除家目录
【注】同时删除的家目录必须符合和用户名的名字一模一样才行，而且删除的时候，会一并将和用户名相同的组一块删除掉
```